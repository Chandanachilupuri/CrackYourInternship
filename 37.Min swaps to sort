class Solution:
    def minSwaps(self, nums):
        # Create a list of tuples (value, index)
        arr = [(value, index) for index, value in enumerate(nums)]
        
        # Sort the list based on the values
        arr.sort(key=lambda it: it[0])
        
        # To keep track of visited elements
        visited = {i: False for i in range(len(nums))}
        
        swaps = 0
        
        # Traverse the array elements
        for i in range(len(nums)):
            # If already visited or already in the correct position, continue
            if visited[i] or arr[i][1] == i:
                continue
            
            # Find the number of nodes in this cycle
            cycle_size = 0
            x = i
            
            while not visited[x]:
                visited[x] = True
                x = arr[x][1]
                cycle_size += 1
            
            # Add the number of swaps needed for this cycle
            if cycle_size > 1:
                swaps += (cycle_size - 1)
        
        return swaps

