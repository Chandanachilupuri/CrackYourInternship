def rabin_karp(pattern, text, q):
    """
    Rabin-Karp algorithm for pattern matching.

    Parameters:
    pattern (str): The pattern string to search for.
    text (str): The text string to search within.
    q (int): A prime number to use for the hash function.

    Returns:
    list: A list of starting indices where the pattern is found in the text.
    """
    M = len(pattern)
    N = len(text)
    p = 0    # hash value for pattern
    t = 0    # hash value for text
    h = 1
    d = 256  # number of characters in the input alphabet
    result = []

    # The value of h would be "pow(d, M-1)%q"
    for i in range(M-1):
        h = (h * d) % q

    # Calculate the hash value of pattern and first window of text
    for i in range(M):
        p = (d * p + ord(pattern[i])) % q
        t = (d * t + ord(text[i])) % q

    # Slide the pattern over text one by one
    for i in range(N - M + 1):
        # Check the hash values of current window of text and pattern.
        # If the hash values match then only check for characters one by one
        if p == t:
            # Check for characters one by one
            match = True
            for j in range(M):
                if text[i + j] != pattern[j]:
                    match = False
                    break
            if match:
                result.append(i)

        # Calculate hash value for next window of text: Remove leading digit,
        # add trailing digit
        if i < N - M:
            t = (d * (t - ord(text[i]) * h) + ord(text[i + M])) % q

            # We might get negative value of t, converting it to positive
            if t < 0:
                t = t + q

    return result

# Example usage
text = "GEEKS FOR GEEKS"
pattern = "GEEK"
q = 101  # A prime number

matches = rabin_karp(pattern, text, q)
print("Pattern found at positions:", matches)
