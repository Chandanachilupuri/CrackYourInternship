def numIslands(grid):
    if not grid:
        return 0

    rows, cols = len(grid), len(grid[0])
    visited = [[False] * cols for _ in range(rows)]

    def dfs(r, c):
        if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == '0' or visited[r][c]:
            return
        visited[r][c] = True
        # Explore all adjacent cells (up, down, left, right)
        dfs(r-1, c)  # up
        dfs(r+1, c)  # down
        dfs(r, c-1)  # left
        dfs(r, c+1)  # right

    islands = 0
    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == '1' and not visited[r][c]:
                islands += 1
                dfs(r, c)
    
    return islands

# Example usage:
grid = [
    ["1", "1", "1", "1", "0"],
    ["1", "1", "0", "1", "0"],
    ["1", "1", "0", "0", "0"],
    ["0", "0", "0", "0", "0"]
]

print(numIslands(grid))  # Output: 1
