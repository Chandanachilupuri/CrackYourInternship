from typing import List

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        def dfs(board, word, i, j, index):
            if index == len(word):
                return True
            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[index]:
                return False
            
            # Mark the cell as visited by replacing it with a special character
            temp = board[i][j]
            board[i][j] = '#'
            
            # Explore the neighbors in the four possible directions
            found = (dfs(board, word, i+1, j, index+1) or 
                     dfs(board, word, i-1, j, index+1) or 
                     dfs(board, word, i, j+1, index+1) or 
                     dfs(board, word, i, j-1, index+1))
            
            # Restore the cell's original value
            board[i][j] = temp
            
            return found
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == word[0]:
                    if dfs(board, word, i, j, 0):
                        return True
        return False
